---
# The opa-example-app-trigger Pipeline will run through several tasks:
# - source is pulled from git
# - deploy manifests via dry-run to test that OPA policy passes before moving on
# - conditions say go test must pass before moving on
# - source is built into an image by img
# - image output is pushed to ECR
# - cloudevent emitted
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: opa-example-app-trigger-pipeline
  namespace: opa-example-app-trigger
spec:
  resources:
    - name: source-repo
      type: git
    - name: image-source
      type: image
    - name: event-to-sink
      type: cloudEvent
  tasks:
    - name: apply-opa-policy
      taskRef:
        name: deploy-locally-dry-run
      resources:
        inputs:
          - name: source
            resource: source-repo
        outputs:
          - name: event-to-sink
            resource: event-to-sink
      params:
        - name: path
          value: /workspace/source/config/ocp/ #configure: may change according to your source
    - name: build-and-push-image
      taskRef:
        name: build-and-push-image
      runAfter:
        - apply-opa-policy
      conditions:
      - conditionRef: "go-test"
        resources:
          - name: source-repo
            resource: source-repo
      params:
        - name: PATH_CONTEXT
          value: /workspace/source
      resources:
        inputs:
          - name: source
            resource: source-repo
        outputs:
          - name: image
            resource: image-source
    - name: deploy-locally
      taskRef:
        name: deploy-locally
      runAfter:
        - build-and-push-image
      resources:
        inputs:
          - name: source
            resource: source-repo
        outputs:
          - name: event-to-sink
            resource: event-to-sink
      params:
        - name: path
          value: /workspace/source/config/ocp/ #configure: may change according to your source
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: deploy-locally-dry-run
  namespace: opa-example-app-trigger
spec:
  inputs:
    resources:
      - name: source
        type: git
    params:
      - name: path
        type: string
        description: Path to the manifests to apply
  outputs:
    resources:
    - name: event-to-sink
      type: cloudEvent
  steps:
    - name: run-oc
      image: quay.io/openshift/origin-cli:4.3
      command: ["oc"]
      args:
        - "apply"
        - "-f"
        - "$(inputs.params.path)"
        - "--server-dry-run"
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-and-push-image
  namespace: opa-example-app-trigger
spec:
  inputs:
    resources:
      - name: source
        type: git
    params:
      - default: .
        description: The path to the root of the repo.
        name: PATH_CONTEXT
        type: string
      - default: 'true'
        description: >-
          Verify the TLS on the registry endpoint (for push/pull to a non-TLS
          registry)
        name: TLSVERIFY
        type: string
  outputs:
    resources:
      - name: image
        type: image
  steps:
    - name: build
      image: quay.io/buildah/stable
      command:
        - buildah
        - bud
        - '--tls-verify=$(inputs.params.TLSVERIFY)'
        - '--layers'
        - '-f'
        - $(inputs.params.PATH_CONTEXT)/Dockerfile
        - '-t'
        - $(outputs.resources.image.url)
        - .
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: /workspace/source
    - name: push
      image: quay.io/buildah/stable
      command:
        - buildah
        - push
        - '--tls-verify=$(inputs.params.TLSVERIFY)'
        - $(outputs.resources.image.url)
        - 'docker://$(outputs.resources.image.url)'
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
  volumes:
    - emptyDir: {}
      name: varlibcontainers
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: deploy-locally
  namespace: opa-example-app-trigger
spec:
  inputs:
    resources:
      - name: source
        type: git
    params:
      - name: path
        type: string
        description: Path to the manifests to apply
  outputs:
    resources:
    - name: event-to-sink
      type: cloudEvent
  steps:
    - name: run-oc
      image: quay.io/openshift/origin-cli:4.3
      command: ["oc"]
      args:
        - "replace"
        - "--force"
        - "-f"
        - "$(inputs.params.path)"
---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: go-test
  namespace: opa-example-app-trigger
spec:
  resources:
    - name: source-repo
      type: git
  check:
    image: registry.access.redhat.com/ubi8/go-toolset
    command: ["go"]
    args: ["test", "./..."]
    workingDir: $(inputs.resources.source-repo.path)
    env:
      - name: GOPATH
        value: /workspace/go
---
# Finally, we need something to receive our cloudevent announcing success!
# That is this services only purpose
apiVersion: v1
kind: Service
metadata:
  name: event-display
  namespace: opa-example-app-trigger
  labels:
    app: event-display
spec:
  type: ClusterIP
  ports:
    - name: listener
      port: 8080
      protocol: TCP
  selector:
    app: event-display
---
apiVersion: v1
kind: Pod
metadata:
  name: event-display
  namespace: opa-example-app-trigger
  labels:
    app: event-display
spec:
  hostname: event-display
  containers:
  - image: gcr.io/knative-releases/github.com/knative/eventing-sources/cmd/event_display
    name: web
